// Generated by CoffeeScript 1.7.1
(function() {
  var config, execFile, parsePackageInfo, parseProjectInfo, parseSubProjectInfo, _;

  config = require('../config');

  execFile = require('child_process').execFile;

  _ = require('underscore');

  module.exports = {
    parse: function(filename, cb) {
      var apkInfo;
      apkInfo = {};
      return parsePackageInfo(filename, function(err, packageInfo) {
        if (err) {
          return cb(err);
        }
        _.extend(apkInfo, packageInfo);
        return parseProjectInfo(filename, function(err, projectInfo) {
          if (err) {
            return cb(err);
          }
          _.extend(apkInfo, projectInfo);
          return parseSubProjectInfo(filename, function(err, subProjectInfo) {
            if (err) {
              return cb(err);
            }
            if (subProjectInfo != null ? subProjectInfo.subProjectid : void 0) {
              apkInfo.projectid += '_' + subProjectInfo.subProjectid;
            }
            return cb(null, apkInfo);
          });
        });
      });
    }
  };

  parsePackageInfo = function(filename, cb) {
    return execFile(config.aapt, ['d', 'badging', filename], {
      maxBuffer: 1024 * 1024
    }, function(err, result) {
      var applicationLabel, m, packageName, versionCode, versionName;
      if (!result) {
        return cb('aapt: no result');
      }
      if (m = result.match(/package: name='([^']+)' versionCode='([^']+)' versionName='([^']+)'/)) {
        packageName = m[1];
        versionCode = m[2];
        versionName = m[3];
      }
      if (m = result.match(/application[-: ]+label[:=]'([^']+)'/)) {
        applicationLabel = m[1];
      }
      return cb(null, {
        packageName: packageName,
        versionCode: versionCode,
        versionName: versionName,
        applicationLabel: applicationLabel
      });
    });
  };

  parseProjectInfo = function(filename, cb) {
    return execFile(config.aapt, ['d', 'xmltree', filename, 'AndroidManifest.xml'], {
      maxBuffer: 1024 * 1024
    }, function(err, result) {
      var m, projectid;
      if (err || !result) {
        return cb(err);
      }
      if (m = result.match(/E: meta-data \(line=\d+\)\s+A: android:name\(0x[0-9a-f]+\)="FREEPAY_CHANNEL_ID" \(Raw: "FREEPAY_CHANNEL_ID"\)\s+A: android:value\(0x[0-9a-f]+\)="([^"]+)" \(Raw: "([^"]+)"\)/)) {
        projectid = m[1];
      }
      return cb(null, {
        projectid: projectid
      });
    });
  };

  parseSubProjectInfo = function(filename, cb) {
    return execFile(config.aapt, ['l', filename], {
      maxBuffer: 1024 * 1024
    }, function(err, result) {
      if (err || !result) {
        return cb(err);
      }
      if (result.match(/META-INF\/channel\.dat/)) {
        return execFile(config.unzip, ['-p', filename, 'META-INF/channel.dat'], {
          maxBuffer: 1024 * 1024
        }, function(err, result) {
          if (err || !result) {
            return cb();
          }
          return cb(null, {
            subProjectid: result
          });
        });
      } else {
        return cb();
      }
    });
  };

}).call(this);

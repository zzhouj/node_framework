// Generated by CoffeeScript 1.7.1
(function() {
  var BaseModel, assert, config, dateformat, mysql, mysqlPool, _,
    __hasProp = {}.hasOwnProperty;

  mysql = require('mysql');

  dateformat = require('dateformat');

  _ = require('underscore');

  mysqlPool = require('../utils/mysqlPool');

  config = require('../config');

  assert = require('assert');

  BaseModel = (function() {
    function BaseModel(table) {
      this.table = table;
      if (this.table.labels) {
        _.each(this.table.labels, (function(_this) {
          return function(val, key) {
            if (key !== '$model') {
              return assert(_this.table.schema[key], "'" + key + "' missing schema");
            }
          };
        })(this));
      }
      if (this.table.defaults) {
        _.each(this.table.defaults, (function(_this) {
          return function(val, key) {
            return assert(_this.table.schema[key], "'" + key + "' missing schema");
          };
        })(this));
      }
    }

    BaseModel.prototype.query = function(options, cb) {
      var leftJoin, leftJoinFields, page, sql, whereSql;
      page = options.page;
      if (page) {
        page = parseInt(page) || 0;
      }
      sql = typeof this.getQuerySql === "function" ? this.getQuerySql(options) : void 0;
      leftJoin = typeof this.getLeftJoin === "function" ? this.getLeftJoin(options) : void 0;
      leftJoinFields = typeof this.getLeftJoinFields === "function" ? this.getLeftJoinFields(options) : void 0;
      if (leftJoinFields) {
        leftJoinFields = "," + leftJoinFields;
      }
      if (!sql) {
        sql = "SELECT\nt1.*\n" + (leftJoinFields || '') + "\nFROM " + (mysql.escapeId(this.table.name)) + " t1\n" + (leftJoin || '') + "\n";
      }
      whereSql = typeof this.getWhereSql === "function" ? this.getWhereSql(options) : void 0;
      if (whereSql) {
        sql += " WHERE " + whereSql + " ";
      }
      if (this.table.orderBy) {
        sql += " ORDER BY " + this.table.orderBy + " ";
      } else {
        sql += " ORDER BY t1." + (mysql.escapeId(this.table.id)) + " DESC ";
      }
      if (page != null) {
        sql += " LIMIT " + (page * config.pageSize) + ", " + config.pageSize + " ";
      }
      return mysqlPool.query(sql, function(err, rows) {
        return cb(err, rows);
      });
    };

    BaseModel.prototype.get = function(id, cb) {
      var sql;
      if (id === '$defaults') {
        return cb(null, this.getDefaults());
      }
      sql = "SELECT\n*\nFROM " + (mysql.escapeId(this.table.name)) + "\nWHERE " + (mysql.escapeId(this.table.id)) + " = " + (mysql.escape(id));
      return mysqlPool.query(sql, function(err, rows) {
        if (err) {
          return cb(err);
        }
        if (!(rows && rows.length > 0)) {
          return cb('not found');
        }
        return cb(err, rows[0]);
      });
    };

    BaseModel.prototype.update = function(id, item, cb) {
      var field, fields, i, sql, type, value, _i, _len, _ref, _ref1;
      sql = "UPDATE " + (mysql.escapeId(this.table.name)) + "\nSET";
      fields = [];
      _ref = this.table.schema;
      for (field in _ref) {
        if (!__hasProp.call(_ref, field)) continue;
        type = _ref[field];
        if ((type != null ? type.type : void 0) != null) {
          type = type.type;
        }
        if (item[field] != null) {
          fields.push({
            field: field,
            type: type
          });
        }
      }
      for (i = _i = 0, _len = fields.length; _i < _len; i = ++_i) {
        _ref1 = fields[i], field = _ref1.field, type = _ref1.type;
        value = item[field];
        if (type === Date) {
          value = dateformat(item[field], 'yyyy-mm-dd HH:MM:ss');
        }
        sql += " " + (mysql.escapeId(field)) + " = " + (mysql.escape(value)) + " ";
        if (i < (fields.length - 1)) {
          sql += " , ";
        }
      }
      sql += " WHERE " + (mysql.escapeId(this.table.id)) + " = " + (mysql.escape(id)) + " ";
      return mysqlPool.query(sql, function(err, result) {
        return cb(err, result);
      });
    };

    BaseModel.prototype["delete"] = function(id, cb) {
      var sql;
      sql = "DELETE\nFROM " + (mysql.escapeId(this.table.name)) + "\nWHERE " + (mysql.escapeId(this.table.id)) + " = " + (mysql.escape(id));
      return mysqlPool.query(sql, function(err, result) {
        return cb(err, result);
      });
    };

    BaseModel.prototype.create = function(item, cb) {
      var field, fields, i, sql, type, value, _i, _len, _ref, _ref1;
      sql = "INSERT\nINTO " + (mysql.escapeId(this.table.name)) + "\nSET";
      fields = [];
      if (item[this.table.id]) {
        fields.push({
          field: this.table.id,
          type: String
        });
      }
      _ref = this.table.schema;
      for (field in _ref) {
        if (!__hasProp.call(_ref, field)) continue;
        type = _ref[field];
        if ((type != null ? type.type : void 0) != null) {
          type = type.type;
        }
        if (item[field] != null) {
          fields.push({
            field: field,
            type: type
          });
        }
      }
      for (i = _i = 0, _len = fields.length; _i < _len; i = ++_i) {
        _ref1 = fields[i], field = _ref1.field, type = _ref1.type;
        value = item[field];
        if (type === Date) {
          value = dateformat(item[field], 'yyyy-mm-dd HH:MM:ss');
        }
        sql += " " + (mysql.escapeId(field)) + " = " + (mysql.escape(value)) + " ";
        if (i < (fields.length - 1)) {
          sql += " , ";
        }
      }
      return mysqlPool.query(sql, function(err, result) {
        return cb(err, result);
      });
    };

    BaseModel.prototype.createTableSql = function() {
      var index, indexKeys, key, keys, keywords, name, sql, statement, uniqueKeys, _i, _j, _k, _len, _len1, _len2, _ref;
      sql = "CREATE TABLE " + (mysql.escapeId(this.table.name)) + " (\n";
      indexKeys = [];
      uniqueKeys = [];
      _.each(this.table.schema, (function(_this) {
        return function(option, field) {
          var mysqlType;
          option = (option != null ? option.type : void 0) != null ? _.extend(option) : {
            type: option
          };
          if (option.isNotNull == null) {
            option.isNotNull = true;
          }
          if (option.index) {
            indexKeys.push({
              field: field,
              desc: option.index < 0
            });
          }
          if (option.unique) {
            uniqueKeys.push({
              field: field,
              desc: option.unique < 0
            });
          }
          if (option.type === String) {
            mysqlType = "VARCHAR(" + (option.size || 45) + ")";
          } else if (option.type === Number) {
            mysqlType = "BIGINT(" + (option.size || 20) + ")";
          } else if (option.type === Date) {
            mysqlType = "DATETIME";
          }
          return sql += "\t" + (mysql.escapeId(field)) + " " + mysqlType + " " + (option.isNotNull ? 'NOT NULL' : 'NULL') + ",\n";
        };
      })(this));
      sql += "\t" + (mysql.escapeId(this.table.id)) + " BIGINT(20) NOT NULL AUTO_INCREMENT,\n";
      sql += "\tPRIMARY KEY (" + (mysql.escapeId(this.table.id)) + ")\n";
      for (_i = 0, _len = indexKeys.length; _i < _len; _i++) {
        key = indexKeys[_i];
        sql += "\t, KEY " + (mysql.escapeId(key.field + '_index')) + " (" + (mysql.escapeId(key.field)) + (key.desc ? ' DESC' : '') + ")\n";
      }
      for (_j = 0, _len1 = uniqueKeys.length; _j < _len1; _j++) {
        key = uniqueKeys[_j];
        sql += "\t, UNIQUE KEY " + (mysql.escapeId(key.field + '_unique')) + " (" + (mysql.escapeId(key.field)) + (key.desc ? ' DESC' : '') + ")\n";
      }
      if (this.table.indexes) {
        _ref = this.table.indexes;
        for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
          index = _ref[_k];
          keys = _.keys(index.keys);
          keywords = (index.unique ? 'UNIQUE KEY' : 'KEY');
          name = keys.join('_') + (index.unique ? '_unique' : '_index');
          statement = ((function() {
            var _l, _len3, _results;
            _results = [];
            for (_l = 0, _len3 = keys.length; _l < _len3; _l++) {
              key = keys[_l];
              _results.push("" + (mysql.escapeId(key)) + (index.keys[key] < 0 ? ' DESC' : ''));
            }
            return _results;
          })()).join(',');
          sql += "\t, " + keywords + " " + (mysql.escapeId(name)) + " (" + statement + ")\n";
        }
      }
      return sql += ") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n";
    };

    BaseModel.prototype.getDefaults = function() {
      if (!this.table.defaults) {
        return {};
      }
      return _.mapObject(this.table.defaults, function(val, key) {
        if ((typeof val) === 'function') {
          return val();
        } else {
          return val;
        }
      });
    };

    return BaseModel;

  })();

  module.exports = BaseModel;

}).call(this);
